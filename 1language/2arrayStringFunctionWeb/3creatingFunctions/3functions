No último vídeo nós conversamos sobre sub-rotinas e como implementá-las: usamos a palavra reservada function do PHP para indicar que estamos definindo uma sub-rotina e a nomeamos, como fizemos com function exibeMensagem(). Esse exibeMensagem precisa receber um valor, que chamamos de parâmetro - no caso, a $mensagem a ser exibida. Feito isso, nós simplesmente exibimos essa $mensagem e adicionamos uma quebra de linha ao final.

Apesar da nossa função exibeMensagem() precisar de parâmetros, podem existir outras que não precisem. Por exemplo, poderíamos criar uma função exibeOlaMundo() sem parâmetro nenhum:

function exibeOlaMundo()
{
    echo "Olá mundo!"
}COPIAR CÓDIGO
Dessa forma, poderíamos chamar exibeOlaMundo() sem informarmos qualquer valor. Agora que entendemos melhor essa parte, nosso objetivo é isolarmos o código referente ao saque.

Note que a palavra function remete a função, e já vimos alguns conceitos de matemática nos nossos códigos (como os operadores aritméticos). A função também existe na matemática: ela recebe um valor e devolve um valor modificado. Por exemplo:

f(x) = x + 2

Se essa função receber o valor 5, ela devolverá 7 como resultado. Isso também pode ser feito em linguagens de programação como o PHP:

function adiciona2($x)
{
    $x + 2;
}COPIAR CÓDIGO
Aqui, temos uma função adiciona2 que recebe um parâmetro que chamamos de $x e simplesmente adiciona 2 ao valor desse parâmetro. Mas como faremos para conseguir o resultado dela? E se quisermos armazenar o resultado em outra variável? Para que nossa função possa representar um valor após executada, utilizamos a palavra reservada return:

function adiciona2($x)
{
    return $x + 2;
}COPIAR CÓDIGO
Dessa forma, poderemos, por exemplo, armazenar o retorno da função em uma variável separada:

function adiciona2($x)
{
    return $x + 2;
}

$sete = adiciona2(5);

echo $sete;
exit();COPIAR CÓDIGO
Recapitulando: estamos chamando uma função adiciona2 com o parâmetro 5. Esse parâmetro é passado como valor e utilizado na operação $x + 2, cujo resultado é devolvido com o return e armazenado na variável $sete que criamos. Com echo $sete, estamos exibindo o valor da variável na tela, e exit() está sendo usado para encerrarmos a execução do código nesse ponto.

Se executarmos php banco.php, teremos um "7" sendo exibido na tela. Para testarmos mais uma vez, renomearemos a variável para $resultado e passaremos 10 como parâmetro de adiciona2():

function adiciona2($x)
{
    return $x + 2;
}

$resultado = adiciona2(10);
echo $resultado;
exit();COPIAR CÓDIGO
Dessa vez, teremos como retorno o resultado "12". Entendidos esses conceitos, vamos avançar.

Queremos criar uma nova função sacar() que cria uma cópia da conta da Maria, mas subtrai 500 reais.

$contasCorrentes['123.456.789-10'] = sacar();COPIAR CÓDIGO
Para que essa função seja executada, precisaremos passar a conta da Maria (o valor que será modificado e devolvido) e o valor que queremos sacar dessa conta.

$contasCorrentes['123.456.789-10'] = sacar($contasCorrentes['123.456.789-10'], 500);COPIAR CÓDIGO
Repare que uma função pode receber vários parâmetros, desde que eles sejam separados por vírgula. Entendido isso, criaremos a função propriamente dita, recebendo como parâmetros $conta e $valorASacar:

function sacar($conta, $valorASacar) {


}COPIAR CÓDIGO
Colocaremos o nosso código de verificação dentro dessa função, fazendo algumas alterações. Primeiro, sabemos que $contasCorrentes é uma variável que não existe dentro dessa função, afinal uma função só conhece as variáveis que forem definidas dentro dela. Como receberemos o valor da $conta, não precisaremos dessa variável.

Além disso, estamos tentando verificar se 500 é maior do que o saldo. Porém, na verdade, queremos verificar se o $valorASacar é maior do que o saldo da conta. Essa mesma variável será utilizada na operação de saque em si.

function sacar($conta, $valorASacar)
{
    if ($valorASacar > $conta['saldo']) {
        exibeMensagem("Você não pode sacar este valor");
    } else {
        $conta['saldo'] -= $valorASacar;
    }
}COPIAR CÓDIGO
Assim, caso o $valorASacar seja maior do que o saldo, será exibida uma mensagem informando que a pessoa não pode sacar. Caso contrário, o $valorASacar será subtraído do valor do saldo.

Lembra que aprendemos que uma função só conhece as variáveis de dentro dela? Isso também significa que o parâmetro $conta só existe dentro da função sacar(). Dessa forma, se executarmos o nosso código da maneira como ele está, nada vai acontecer.

<?php

function exibeMensagem($mensagem){
    echo $mensagem . PHP_EOL;
}

function sacar($conta, $valorASacar)
{
    if ($valorASacar > $conta['saldo']) {
        exibeMensagem("Você não pode sacar este valor");
    } else {
        $conta['saldo'] -= $valorASacar;
    }
}

$contasCorrentes = [
    '123.456.789-10' => [
        'titular' => 'Maria',
        'saldo' => 10000
    ],
    '123.456.789-11' => [
        'titular' => 'Alberto',
        'saldo' => 300
    ],
    '123.256.789-12' => [
        'titular' => 'Vinicius',
        'saldo' => 100
    ]
];


$contasCorrentes['123.456.789-10'] = sacar($contasCorrentes['123.456.789-10'], 500);

foreach ($contasCorrentes as $cpf => $conta) {
    exibeMensagem($cpf . " " . $conta['titular'] . ' ' . $conta['saldo']);
}COPIAR CÓDIGO
Como retorno, teremos:

123.456.789-10

123.456.789-11 Alberto 300

123.256.789-12 Vinicius 100

Ou seja, o titular e o saldo da Maria não aparecem mais. Isso porque, em sacar($contasCorrentes['123.456.789-10'], 500), estamos modificando uma cópia da conta da Maria (o parâmetro $conta), e não a variável original. Precisaremos, então, devolver o parâmetro que foi modificado para que ele seja armazenado na conta. Para isso, faremos return $conta:

function sacar($conta, $valorASacar)
{
    if ($valorASacar > $conta['saldo']) {
        exibeMensagem("Você não pode sacar este valor");
    } else {
        $conta['saldo'] -= $valorASacar;
    }

    return $conta;
}COPIAR CÓDIGO
Como retorno da execução desse código, teremos:

123.456.789-10 Maria 9500

123.456.789-11 Alberto 300

123.256.789-12 Vinicius 100

Ou seja, o nosso saque funcionou! Vamos tentar repetir o processo para a conta do Alberto:

$contasCorrentes['123.456.789-10'] = sacar($contasCorrentes['123.456.789-10'], 500);
$contasCorrentes['123.456.789-11'] = sacar($contasCorrentes['123.456.789-11'], 500);COPIAR CÓDIGO
Quando executarmos php banco.php no terminal, o PHP verificará que 500 é maior do que o valor na conta de Alberto (300), e, por isso, retornará a $conta sem modificação alguma. Assim, teremos:

Você não pode sacar.

123.456.789-10 Maria 9500

123.456.789-11 Alberto 300

123.256.789-12 Vinicius 100

Com isso, conseguimos isolar sub-rotinas e funções. Mas qual a diferença entre sub-rotinas e funções? Sinceramente, a maioria das pessoas que programam não sabem explicar essa diferença, porque ela é bem sutil. Uma sub-rotina executa tudo que ele precisa dentro da própria função e não devolve valor nenhum. Já uma função executa e devolve um valor.

Para o PHP e algumas outras linguagens de programação, não faz diferença na sintaxe, afinal elas são definidas e executadas da mesma forma. Em outras linguagens, a forma de definir ou chamar uma função ou sub-rotina pode ser diferenciada.

No PHP, o importante é entender que uma função ou sub-rotina pode retornar um valor. Quando ela retorna, a chamada da função passa a representar o valor retornado. Em outros casos, ela pode não retornar nada, simplesmente executa algum código.

Aprendemos o que são sub-rotinas/funções e já conseguimos realizar saques nas nossas contas-correntes. Agora, queremos também adicionar valores às contas, criando uma operação de depósito. Faremos isso no próximo vídeo.
